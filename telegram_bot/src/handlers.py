import logging
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest, TelegramError
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)

import src.states as st

import src.config as conf

import src.api_utils as api_utils


logger = logging.getLogger(__name__)


async def start(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    clear_user_data(update, context)

    assert update.message is not None
    assert update.message.from_user is not None

    user = update.message.from_user
    logger.info(f'{user.id} started bot')

    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫—Ä—É–∂–æ—á–∫–∏.\n'
        '–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏.'
    )


# Fallbacks command handler.
async def restart_conversation(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> str:
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–π –ø–µ—Å–Ω–∏.
    """
    clear_user_data(update, context)

    TEXT = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:'

    if update.message:
        await update.message.reply_text(TEXT)

    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(TEXT)

    return st.TYPING_SONG_NAME


def get_main_menu(
        context: ContextTypes.DEFAULT_TYPE
) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.

    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    :return: –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —è–≤–ª—è—é—â–µ–π—Å—è –º–µ–Ω—é.
    """
    assert context.user_data is not None

    user_data = context.user_data

    time_code_message = ('‚è±Ô∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: —Å '
                         f'{user_data[st.DURATION_LEFT_BORDER]}—Å '
                         f'–ø–æ {user_data[st.DURATION_RIGHT_BORDER]}—Å')

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    time_code_message,
                    callback_data=st.SET_TIME_CODE
                ),
            ],
            [
                InlineKeyboardButton(
                    '‚ñ∂Ô∏è–°–æ–∑–¥–∞—Ç—å –∫—Ä—É–∂–æ–∫',
                    callback_data=st.CREATE_VIDEO_MESSAGE
                ),
            ],
            [
                InlineKeyboardButton(
                    "üîÑ –ù–∞–π—Ç–∏ –Ω–æ–≤—É—é –ø–µ—Å–Ω—é",
                    callback_data=str(st.RESTART_SEARCH)
                ),
            ],
        ]
    )

    return keyboard


# ENTRY_POINT
async def save_audio(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> str | None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ file_id.
    –ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π.
    """
    assert update.message is not None

    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–µ–ª –∏–º–µ–Ω–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª
    audio = message.audio or message.voice
    if not audio:
        await message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, OGG, WAV).')
        return None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_id = audio.file_id

    assert audio.file_size is not None

    file_size = audio.file_size  # –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    # MIME-—Ç–∏–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä 'audio/mpeg' –¥–ª—è mp3 –∏ 'audio/ogg' –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö
    mime_type = audio.mime_type

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6MB)
    max_file_size = 6 * 1024 * 1024  # 6 MB
    if file_size > max_file_size:
        await message.reply_text(
            f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.2f} MB! '
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äì 6MB.'
        )
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ MIME-—Ç–∏–ø—ã
    allowed_mime = {'audio/mpeg', 'audio/ogg', 'audio/wav'}
    if mime_type not in allowed_mime:
        await message.reply_text(
            '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MP3, OGG, WAV.'
        )
        return None

    assert context.user_data is not None

    user_data = context.user_data

    file_duration = audio.duration
    user_data[st.FILE_DURATION] = str(file_duration)

    file_name_extension = get_file_name_extension(mime_type)
    file_name = file_id + file_name_extension

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await context.bot.get_file(file_id)

    assert conf.DOWNLOAD_FOLDER is not None

    file_path = os.path.join(conf.DOWNLOAD_FOLDER, f'{file_name}')
    user_data[st.TRACK_ID] = file_id
    user_data[st.TRACK_FILE_PATH] = file_path
    os.makedirs(conf.DOWNLOAD_FOLDER, exist_ok=True)

    await file.download_to_drive(file_path)

    logger.info(f'–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –†–∞–∑–º–µ—Ä - {file_size} –ü—É—Ç—å - {file_path}')

    await message.reply_text('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø–æ—Å–ª–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥.
    user_data[st.DURATION_LEFT_BORDER] = str(0)
    user_data[st.DURATION_RIGHT_BORDER] = str(min(60, file_duration))

    keyboard = get_main_menu(context)

    await message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=keyboard)

    return st.CHOOSING_OPTIONS


# ENTRY POINT / TYPING_SONG_NAME
async def search_audio_by_name(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> str | None:
    """
    –ò—â–µ—Ç –ø–µ—Å–Ω—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º,
    –∏ –≤—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    assert update.message is not None
    assert update.message.text is not None

    track_name = update.message.text
    logger.info(track_name)

    tracks = await api_utils.search_for_tracks(
        track_name=track_name
    )

    if tracks is None:
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
        )
        return None

    if not tracks:
        await update.message.reply_text(
            '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑.'
        )
        return None

    text = '–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –ø–µ—Å–Ω—é –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö:'
    inline_keyboards = []
    for i, track in enumerate(tracks, start=1):
        text += (f'\n {i}) {track.title} ‚Äì {track.artists} '
                 f'({track.duration // 60}:{track.duration % 60})')

        inline_keyboards.append(
            InlineKeyboardButton(
                str(i),
                callback_data=str(track.id))
        )

    keyboard = [
        inline_keyboards[:1],
        inline_keyboards[1:]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        text,
        reply_markup=reply_markup
    )

    return st.SELECTING_SONG


# SELECTING_SONG
async def save_selected_audio(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int | str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Å–Ω—é –ø–æ id –∏–∑ callback query."""

    assert update.callback_query is not None

    query = update.callback_query
    assert query.data is not None
    await query.answer()

    assert context.user_data is not None

    track_id = query.data
    duration = await api_utils.get_track_info(track_id=track_id)

    if not duration:
        await query.edit_message_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∑–∞–Ω–æ–≤–æ.'
        )
        return st.TYPING_SONG_NAME

    user_data = context.user_data

    user_data[st.TRACK_ID] = track_id
    user_data[st.FILE_DURATION] = str(duration)
    user_data[st.DURATION_LEFT_BORDER] = str(0)
    user_data[st.DURATION_RIGHT_BORDER] = str(min(60, duration))

    keyboard = get_main_menu(context)

    await query.edit_message_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
        reply_markup=keyboard
    )

    return ConversationHandler.END


def get_file_name_extension(mime: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏—Å—Ö–æ–¥—è –∏–∑ MIME-—Ç–∏–ø–æ–≤.

    :param mime: MIME-—Ç–∏–ø.

    :return: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    """
    match mime:
        case 'audio/mpeg':
            return '.mp3'
        case 'audio/ogg':
            return '.ogg'
        case 'audio/x-wav':
            return '.wav'
        case _:
            return ''


# ENTRY POINT
async def print_time_codes(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> str:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    assert update.callback_query is not None

    query = update.callback_query
    await query.answer()

    keyboard = [
        [
            InlineKeyboardButton('‚≠êÔ∏è–° –Ω–∞—á–∞–ª–∞',
                                 callback_data=st.DURATION_START),
            InlineKeyboardButton('–í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å–∞–º–æ–º—É',
                                 callback_data=st.DURATION_CUSTOM),
        ],
        [
            InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=st.BACK_TO_MENU),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    assert context.user_data is not None

    audio_duration = context.user_data[st.FILE_DURATION]

    await query.edit_message_text(
        f'–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–±—Ä–µ–∂–µ–º —Ç–≤–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∫–∞–∫ –Ω–∞–¥–æ!\n'
        f'–ï–≥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {audio_duration}—Å. '
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫—Ä—É–∂–æ—á–∫–∞ - 1 –º–∏–Ω—É—Ç–∞. '
        '–ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ—Å–æ–±—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –ø–µ—Å–Ω–∏.',
        reply_markup=reply_markup
    )

    return st.SELECTING_ACTION


# SELECTING_ACTION
async def set_start_time(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å –Ω–∞—á–∞–ª–∞.
    """
    assert update.callback_query is not None

    query = update.callback_query
    await query.answer()

    assert context.user_data is not None

    context.user_data[st.DURATION_LEFT_BORDER] = str(0)
    context.user_data[st.DURATION_RIGHT_BORDER] = str(
        min(60, int(context.user_data[st.FILE_DURATION])))

    keyboard = get_main_menu(context)

    await query.edit_message_text(
        '‚úÖ–ë—É–¥–µ–º –æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
        reply_markup=keyboard
    )

    return ConversationHandler.END


# SELECTING_ACTION
async def print_custom_time_text(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> str:
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    assert update.callback_query is not None

    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        '–•–æ—Ä–æ—à–æ, –∑–∞–¥–∞–π –≤—Ä–µ–º—è –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º:—Å—Å –∏–ª–∏ —Å—Å –¥–ª—è '
        '–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞, –∏–ª–∏ –º–º:—Å—Å –º–º:—Å—Å –∏–ª–∏ —Å—Å —Å—Å –¥–ª—è '
        '–æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).'
    )

    return st.INPUT_TIME_CODE


# INPUT_TIME_CODE
async def set_custom_time(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é.
    """
    assert update.message is not None
    assert update.message.text is not None

    text = update.message.text
    time_codes = tuple(map(get_seconds, text.split()))

    assert context.user_data is not None

    user_data = context.user_data

    user_data[st.DURATION_LEFT_BORDER] = str(
        time_codes[0])  # –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞—á–µ–Ω–∏–π

    if len(time_codes) == 2:
        user_data[st.DURATION_RIGHT_BORDER] = str(time_codes[1])
    else:
        user_data[st.DURATION_RIGHT_BORDER] = str(
            min(time_codes[0] + 60, int(user_data[st.FILE_DURATION])))

    keyboard = get_main_menu(context)

    await update.message.reply_text(
        f'‚úÖ–í–æ–∑—å–º–µ–º –∞—É–¥–∏–æ —Å {context.user_data[st.DURATION_LEFT_BORDER]}—Å –ø–æ '
        f'{context.user_data[st.DURATION_RIGHT_BORDER]}—Å.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
        reply_markup=keyboard
    )

    return ConversationHandler.END


def get_seconds(time: str) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—É–Ω–¥ –∏–∑ —Å—Ç—Ä–æ–∫–∏, —è–≤–ª—è—é—â–µ–π—Å—è –≤—Ä–µ–º–µ–Ω–µ–º.

    :param time: –í—Ä–µ–º—è –≤ –≤–∏–¥–µ mm:ss –∏–ª–∏ ss.

    :return: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    if ':' in time:
        m, s = map(int, time.split(':'))
        return m * 60 + s
    return int(time)


# SELECTING_ACTION
async def back_to_menu(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é.
    """
    assert update.callback_query is not None

    query = update.callback_query
    await query.answer()

    keyboard = get_main_menu(context)

    await query.edit_message_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:',
        reply_markup=keyboard
    )

    return ConversationHandler.END


# CHOOSING_OPTIONS
async def create_video_message(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    assert update.callback_query is not None
    assert update.effective_chat is not None
    assert context.user_data is not None
    assert conf.DOWNLOAD_FOLDER is not None

    query = update.callback_query
    await query.answer()
    video_note_processing_message = (
        '–•–æ—Ä–æ—à–æ, —Å–æ–∑–¥–∞—é –∫—Ä—É–∂–æ–∫...\n'
        '‚öôÔ∏è'
    )
    await query.edit_message_text(
        text=video_note_processing_message
    )

    bot = context.bot
    chat_id = update.effective_chat.id
    user_data = context.user_data

    track_id = user_data[st.TRACK_ID]

    ERROR_MESSAGE_TO_USER = '–û—à–∏–±–∫–∞, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–∂–∫–∞ üò¢'

    # MP3 FILE DOWNLOADING.

    assert conf.DOWNLOAD_FOLDER is not None

    file_path = await api_utils.download_track_stream(
        track_id=track_id,
        save_dir=conf.DOWNLOAD_FOLDER
    )

    user_data[st.TRACK_FILE_PATH] = file_path

    logger.info(f'–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}')

    video_note_processing_message += '‚öôÔ∏è'
    await query.edit_message_text(
        text=video_note_processing_message
    )

    # AUDIO TRIMMING.

    output_audio_file_path = f'{conf.DOWNLOAD_FOLDER}/trimmed_{track_id}.mp3'

    logger.info(
        'Prepairing for trimming audio: '
        f'{user_data[st.TRACK_FILE_PATH]=} '
        f'{int(user_data[st.DURATION_LEFT_BORDER])=} '
        f'{int(user_data[st.DURATION_RIGHT_BORDER])=} '
        f'{output_audio_file_path=}'
    )

    is_audio_trimmed = await api_utils.trim_audio(
        file_path=user_data[st.TRACK_FILE_PATH],
        start=int(user_data[st.DURATION_LEFT_BORDER]),
        end=int(user_data[st.DURATION_RIGHT_BORDER]),
        output_path=output_audio_file_path
    )

    if not is_audio_trimmed:
        logger.warning(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ.'
        )
        await query.edit_message_text(
            text=ERROR_MESSAGE_TO_USER
        )
        return ConversationHandler.END

    video_note_processing_message += '‚öôÔ∏è'
    await query.edit_message_text(
        text=video_note_processing_message
    )

    # COVER DOWNLOADING.

    cover_file_path = await api_utils.download_cover(
        track_id=track_id,
        save_dir=conf.DOWNLOAD_FOLDER
    )

    if not cover_file_path:
        logger.warning(
            f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É –¥–ª—è —Ç—Ä–µ–∫–∞ {track_id}. '
            '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–ª–æ–∂–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.'
        )
        cover_file_path = 'video_note_images/vinyl_default.jpg'

    video_note_processing_message += '‚öôÔ∏è'
    await query.edit_message_text(
        text=video_note_processing_message
    )

    # VIDEO CREATION.

    output_video_file_path = f'{conf.DOWNLOAD_FOLDER}/video_{track_id}.mp4'

    logger.info(
        'Prepairing for trimming audio: '
        f'{output_video_file_path=} '
        f'{cover_file_path=} '
        f'{output_audio_file_path=}'
    )

    is_video_created = await api_utils.create_video(
        audio_path=output_audio_file_path,
        image_path=cover_file_path,
        output_path=output_video_file_path
    )

    logger.info(f'–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: {os.listdir(path=conf.DOWNLOAD_FOLDER)}')

    if not is_video_created:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞.')
        await query.edit_message_text(
            text=ERROR_MESSAGE_TO_USER
        )
        return ConversationHandler.END

    if not os.path.exists(output_video_file_path):
        logger.error(f'–§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {output_video_file_path}')
        await query.edit_message_text(
            text=ERROR_MESSAGE_TO_USER
        )
        return ConversationHandler.END

    try:
        logger.info(f'–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ –≤ chat_id: {chat_id}')

        with open(output_video_file_path, 'rb') as video_file:
            await bot.send_video_note(
                chat_id=chat_id,
                video_note=video_file,
            )

        logger.info('–í–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')

    except BadRequest as e:
        logger.error(f'–û—à–∏–±–∫–∞ Telegram (BadRequest): {e}')
        error_message = f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫: {e.message}'

        if ('wrong file identifier' in str(e).lower()
                or 'can\'t parse url' in str(e).lower()):
            error_message += ('\n–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, '
                              'URL –∏–ª–∏ file_id.')
        elif 'chat not found' in str(e).lower():
            error_message += ('\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å '
                              f'TARGET_CHAT_ID ({chat_id}).')
        elif 'VIDEO_NOTE_DIMENSIONS_INVALID' in str(e):
            error_message += '\n–í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º.'

        logger.error(error_message)

    except TelegramError as e:
        logger.error(f'–û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram: {e}')

    except Exception as e:
        logger.error(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')

    clear_user_data(update, context)
    return ConversationHandler.END


async def done(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞, –≤—ã–∑–æ–≤ clear.
    """
    pass


def clear_user_data(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –æ—á–∏—â–∞–µ—Ç user_data.
    """
    if update.message:
        assert update.message.from_user is not None

        user_info = (f'{update.message.from_user.id} - '
                     f'{update.message.from_user.username}')
    else:
        assert update.callback_query is not None

        user_info = (f'{update.callback_query.from_user.id} - '
                     f'{update.callback_query.from_user.username}')

    assert context.user_data is not None

    user_data = context.user_data

    if user_data.get(st.TRACK_FILE_PATH):
        path = user_data[st.TRACK_FILE_PATH]
        if os.path.exists(path):
            os.remove(path)
            logger.info(f'{user_info}: File {path} has been deleted')
        else:
            logger.info(f'{user_info}: File {path} has already been deleted')

    user_data.clear()

    logger.info(f'{user_info}: user_data has been cleared')
